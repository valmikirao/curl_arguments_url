name: PyBugsAI
description: Runs PyBugsAI and Caches Its Data
inputs:
  api-key:
    description: The OPEN_AI_API_KEY
    required: true
runs:
  using: composite
  steps:
    - name: Get Python Files Hash
      id: py-files-hash
      shell: bash
      run: |
        # Using `hashFiles('**/*.py')` works but is insanely slow.  This does essentially the same
        echo "hash=$(git ls-files '*.py' | xargs md5sum | md5sum | awk '{print $1}')" >> "$GITHUB_OUTPUT"
    - name: Restore PyBugsAI Cache
      id: pybugsai-cache
      uses: actions/cache/restore@v3
      with:
        path: .pybugsai
        key: pybugsai-${{ steps.py-files-hash.outputs.hash }}-SUCCESS
        restore-keys: |
          pybugsai-${{ steps.py-files-hash.outputs.hash }}-
          pybugsai-
    - name: Run PyBugsAI
      id: pybugsai
      shell: bash
      run: |
        . ./scripts/venv_github.sh
        ./scripts/pybugsai_github.sh "$GITHUB_OUTPUT"
        echo "result=success" >> "$GITHUB_OUTPUT"
      env:
        OPEN_AI_API_KEY: ${{ inputs.api-key }}
    - name: Save PyBugsAI Cache
      if: steps.pybugsai-cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: .pybugsai
        key: pybugsai-${{ steps.py-files-hash.outputs.hash }}-${{
          steps.pybugsai.outputs.result == 'success' && 'SUCCESS' || 'FAIL'
        }}  # caches one failure.  Hopefully, there aren't too many failures with the same '*.py' files

